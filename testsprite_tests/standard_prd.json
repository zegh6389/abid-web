{
  "meta": {
    "project": "Margin Kidz E-commerce Platform",
    "date": "2025-08-08",
    "prepared_by": "Generated by AI based on provided PRD and code summary"
  },
  "product_overview": "Margin Kidz is a premium children's apparel e-commerce platform designed to deliver a seamless and vibrant shopping experience for customers, alongside robust admin capabilities for managing products, variants, inventory, and media. It utilizes a modern tech stack including Next.js 14, TypeScript, Prisma ORM with PostgreSQL, and AWS services such as S3 for scalable media storage, ensuring both performance and security.",
  "core_goals": [
    "Provide customers with an intuitive and responsive shopping experience optimized for both desktop and mobile devices.",
    "Enable comprehensive admin controls for managing products, product variants, media uploads, inventory, and collections through a secure authentication system.",
    "Implement a scalable, secure, and performant backend with robust RESTful APIs covering products, variants, media, uploads, authentication, and health monitoring.",
    "Ensure real-time inventory tracking and manage product variants with rich media support.",
    "Leverage AWS infrastructure for scalability, media storage, and security best practices including password hashing, session management, and input validation."
  ],
  "key_features": [
    "Customer-facing product catalog with filtering, search, and detailed product pages supporting variant selection and media display.",
    "Admin interface with secure login, role-based access, and full CRUD on products, variants, inventory, and media including S3 presigned upload URLs.",
    "Robust backend APIs: Products API (list, create, update, delete products and variants), Variants API (update, delete variants), Media API (create media items), Uploads Presign API (generate secure S3 upload URLs), Admin Auth API (login/logout), Sentinel API (simulate DB down for testing), and Health API (system health check).",
    "Integration with AWS S3 for media storage and upload management with presigned URLs.",
    "Responsive and accessible UI implemented with Tailwind CSS and Next.js App Router for optimized user experience and performance."
  ],
  "user_flow_summary": [
    "Customer visits homepage and navigates to category or kids landing pages to browse featured children's apparel.",
    "Customer views product detail pages, selects variants such as size and color, and adds items to shopping cart.",
    "Admin user logs in securely via the admin login page and accesses the dashboard for product management.",
    "Admin creates, updates, and deletes products and product variants through forms with validation, including uploading media assets using presigned S3 URLs.",
    "System processes HTTP API requests for product CRUD, variant management, media uploads, and admin authentication while handling validation and errors robustly.",
    "Backend monitors health via a dedicated health check endpoint and supports testing scenarios with sentinel files to simulate database outages."
  ],
  "validation_criteria": [
    "All customer-facing pages load correctly with responsive design verified across desktop, tablet, and mobile devices.",
    "Admin authentication enforces secure login, session management, and role-based access controls with correct handling of valid and invalid credentials.",
    "API endpoints pass functional tests for creating, updating, retrieving, and deleting products, variants, and media items, respecting validation and error cases.",
    "Media uploads generate and utilize AWS S3 presigned URLs securely with correct permissions and content-type handling.",
    "Inventory and variant updates reflect real-time stock levels and maintain data consistency including cascading deletes.",
    "System health endpoints respond promptly indicating uptime, and sentinel APIs correctly simulate and clear no-database scenarios for testing.",
    "Performance benchmarks met for page load times (under 3 seconds) and API response times (under 500 ms) with no N+1 query problems.",
    "Security measures verified: password hashing, secure cookies, CSRF protection, input validation preventing SQL injection and XSS, and security headers set correctly.",
    "Cross-browser compatibility confirmed on latest versions of Chrome, Firefox, Safari, Edge, and commonly used mobile browsers, validated through manual and automated tests."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 14 (App Router)",
      "Node.js",
      "Prisma",
      "PostgreSQL",
      "AWS SDK v3 (S3)",
      "Tailwind CSS"
    ],
    "features": [
      {
        "name": "Health API",
        "description": "Simple health check endpoint to verify the server is alive.",
        "files": [
          "src/app/api/health/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Health API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/health": {
              "get": {
                "summary": "Health status",
                "responses": {
                  "200": {
                    "description": "OK",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "ok": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Products API",
        "description": "List, create products; get/update/delete product by id; create variants for a product.",
        "files": [
          "src/app/api/products/route.ts",
          "src/app/api/products/[id]/route.ts",
          "src/app/api/products/[id]/variants/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Products API",
            "version": "1.0.0"
          },
          "components": {
            "schemas": {
              "Product": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "slug": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "Variant": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "productId": {
                    "type": "string"
                  },
                  "sku": {
                    "type": "string",
                    "nullable": true
                  },
                  "price": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "paths": {
            "/api/products": {
              "get": {
                "summary": "List products",
                "responses": {
                  "200": {
                    "description": "OK",
                    "content": {
                      "application/json": {
                        "schema": {
                          "oneOf": [
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Product"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "products": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/components/schemas/Product"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "post": {
                "summary": "Create product",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "slug": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "subtitle": {
                            "type": "string",
                            "nullable": true
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "required": [
                          "slug",
                          "title"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Created",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "$ref": "#/components/schemas/Product"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/api/products/{id}": {
              "get": {
                "summary": "Get product by id",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "OK"
                  },
                  "404": {
                    "description": "Not found"
                  },
                  "503": {
                    "description": "DB unavailable"
                  }
                }
              },
              "patch": {
                "summary": "Update product",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Updated"
                  },
                  "400": {
                    "description": "Invalid"
                  }
                }
              },
              "delete": {
                "summary": "Delete product",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Deleted"
                  },
                  "400": {
                    "description": "Error"
                  }
                }
              }
            },
            "/api/products/{id}/variants": {
              "post": {
                "summary": "Create variant for product",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "sku": {
                            "type": "string"
                          },
                          "optionSize": {
                            "type": "string"
                          },
                          "optionColor": {
                            "type": "string"
                          },
                          "price": {
                            "type": "number"
                          },
                          "stock": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Created"
                  },
                  "400": {
                    "description": "Error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Variants API",
        "description": "Update/delete variant; upsert inventory.",
        "files": [
          "src/app/api/variants/[variantId]/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Variants API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/variants/{variantId}": {
              "patch": {
                "summary": "Update variant and inventory",
                "parameters": [
                  {
                    "name": "variantId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Updated"
                  },
                  "400": {
                    "description": "Error"
                  }
                }
              },
              "delete": {
                "summary": "Delete variant",
                "parameters": [
                  {
                    "name": "variantId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Deleted"
                  },
                  "400": {
                    "description": "Error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Media API",
        "description": "Create media item for a variant.",
        "files": [
          "src/app/api/variants/[variantId]/media/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Media API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/variants/{variantId}/media": {
              "post": {
                "summary": "Create media",
                "parameters": [
                  {
                    "name": "variantId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string"
                          },
                          "alt": {
                            "type": "string"
                          },
                          "isPrimary": {
                            "type": "boolean"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "IMAGE",
                              "VIDEO",
                              "SPIN360"
                            ]
                          }
                        },
                        "required": [
                          "url"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Created"
                  },
                  "400": {
                    "description": "Error"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Uploads Presign API",
        "description": "Generate S3 presigned URL for uploads.",
        "files": [
          "src/app/api/uploads/presign/route.ts",
          "src/lib/aws/s3.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Uploads API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/uploads/presign": {
              "post": {
                "summary": "Get signed URL",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "contentType": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "key"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "OK"
                  },
                  "400": {
                    "description": "Bad request"
                  },
                  "500": {
                    "description": "Missing bucket"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Admin Auth API",
        "description": "Login to admin (sets cookie), logout (clears cookie), and upgrade plaintext passwords to hashed.",
        "files": [
          "src/app/api/admin/login/route.ts",
          "src/app/api/admin/logout/route.ts",
          "src/app/api/admin/upgrade-password/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Admin Auth API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/admin/login": {
              "post": {
                "summary": "Admin login",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "email",
                          "password"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "OK"
                  },
                  "401": {
                    "description": "Invalid"
                  },
                  "500": {
                    "description": "DB unavailable"
                  }
                }
              }
            },
            "/api/admin/logout": {
              "post": {
                "summary": "Admin logout",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              },
              "get": {
                "summary": "Logout via GET",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            },
            "/api/admin/upgrade-password": {
              "post": {
                "summary": "Deprecated password upgrade",
                "responses": {
                  "410": {
                    "description": "Gone"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Sentinel API",
        "description": "Create/delete/check DB_OFF sentinel file to simulate no-DB scenarios for tests.",
        "files": [
          "src/app/api/sentinel/status/route.ts",
          "src/app/api/sentinel/create/route.ts",
          "src/app/api/sentinel/delete/route.ts",
          "src/app/api/db_off_sentinel_status/route.ts",
          "src/app/api/db_off_sentinel_create/route.ts",
          "src/app/api/db_off_sentinel_delete/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Sentinel API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/sentinel/status": {
              "get": {
                "summary": "Check sentinel",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            },
            "/api/sentinel/create": {
              "get": {
                "summary": "Create sentinel (GET)",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              },
              "post": {
                "summary": "Create sentinel (POST)",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            },
            "/api/sentinel/delete": {
              "get": {
                "summary": "Delete sentinel (GET)",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              },
              "post": {
                "summary": "Delete sentinel (POST)",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
