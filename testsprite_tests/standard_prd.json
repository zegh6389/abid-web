{
  "meta": {
    "project": "Margin Kidz Supplier Integration Enhancement",
    "date": "2025-08-14",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "Enhance the existing Margin Kidz e-commerce platform to integrate multiple dropshipping suppliers for automated catalog synchronization, order placement, and shipment tracking updates, ensuring real-time inventory accuracy and streamlined supplier order fulfillment with minimal disruption to the current system architecture.",
  "core_goals": [
    "Enable seamless integration with multiple suppliers including Spocket, Wholesale2B, Syncee, CJ Dropshipping, Modalyst, and AutoDS.",
    "Automate pulling product catalogs and inventory data from all suppliers with scheduled synchronization.",
    "Automatically push paid customer orders to the corresponding supplier for fulfillment.",
    "Receive and process shipment and tracking updates via webhook or polling mechanisms to keep customers informed.",
    "Maintain minimal changes to the existing codebase by introducing a clean, modular supplier integration layer.",
    "Implement security best practices including HMAC verification for webhook endpoints and API rate limiting.",
    "Enhance the admin interface to support supplier-related data visibility and links.",
    "Support background processing and queuing to optimize performance and user experience during order placement.",
    "Ensure deployment workflows include database migrations and catalog/order sync commands for continuous integration and delivery."
  ],
  "key_features": [
    "New Supplier Integration Layer in the codebase under 'lib/suppliers' that hosts adapters for each supplier platform.",
    "Extended Prisma schema to include Supplier, SupplierProduct, and SupplierOrder models with relevant relations and enums.",
    "Environment variable support for supplier credentials and webhook secrets.",
    "Scheduled catalog synchronization job fetching and upserting products from all suppliers.",
    "Order placement workflow extended to route orders by supplier with new internal API endpoint '/api/internal/create-supplier-order'.",
    "Webhook endpoints for Spocket, AutoDS, and Modalyst to receive shipment updates validated by HMAC signatures.",
    "Polling fallback job for Wholesale2B to compensate for lack of webhooks.",
    "Admin UI updates to include supplier columns in product listings and external status and tracking information on orders.",
    "Optional background queue setup using BullMQ and ioredis to handle supplier order placement and polling tasks asynchronously.",
    "CI/CD commands configured to run Prisma migrations and sync jobs automatically during deployment.",
    "Logging and observability enhancements with structured logging targeting CloudWatch or Logtail."
  ],
  "user_flow_summary": [
    "Catalog Sync Flow: A scheduled cron job triggers the 'catalogSync' job which iterates over all registered suppliers, fetches product listings, and upserts products and variants into the central database to keep inventory up to date.",
    "Checkout & Order Placement Flow: After successful payment, the system groups order items by supplier and calls the corresponding supplier adapter's placeOrder method via the internal API to create supplier orders synchronized with external supplier systems.",
    "Shipment Update Flow: Supplier webhooks post updates (such as shipment tracking) to dedicated API routes, where HMAC signature is verified. Upon valid updates, order records are updated and customers receive notification emails.",
    "Polling Flow: For suppliers without webhook capabilities like Wholesale2B, a polling job runs every two hours to fetch order status updates and sync with the system.",
    "Admin Interface Interaction: Administrators can view and manage supplier-related product and order data, see supplier statuses, tracking numbers, and use direct links to supplier portals.",
    "Background Processing Flow: Asynchronous processing of supplier order placement and polling tasks via BullMQ queues to enhance responsiveness and scalability."
  ],
  "validation_criteria": [
    "Successful database migration with new Prisma models and enums without impacting existing data.",
    "Supplier adapters correctly authenticate and fetch paginated product data from all six suppliers.",
    "Catalog sync job runs on schedule and updates the central product catalog accurately.",
    "Internal API successfully groups order items by supplier and places supplier orders corresponding to paid customer orders.",
    "Webhook endpoints validate incoming requests using HMAC and update order status and tracking data accordingly.",
    "Polling job correctly updates order statuses for suppliers without webhook support like Wholesale2B.",
    "Admin UI displays supplier columns and relevant shipping/tracking info without errors.",
    "Background processing queue handles tasks swiftly, minimizing checkout latency.",
    "CI/CD pipelines execute migrations and sync commands without failure.",
    "Logs capture comprehensive integration-related events, including errors, successfully.",
    "System enforces API rate limits and rejects improperly signed webhook requests to maintain security."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 14 (App Router)",
      "Node.js",
      "Prisma",
      "PostgreSQL",
      "AWS SDK v3 (S3)",
      "Tailwind CSS"
    ],
    "features": [
      {
        "name": "Health API",
        "description": "Simple health check endpoint to verify the server is alive.",
        "files": [
          "src/app/api/health/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Health API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/health": {
              "get": {
                "summary": "Health status",
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Products API",
        "description": "List and manage products and variants.",
        "files": [
          "src/app/api/products/route.ts",
          "src/app/api/products/[id]/route.ts",
          "src/app/api/products/[id]/variants/route.ts",
          "src/app/api/products/slug/[slug]/route.ts",
          "src/app/api/variants/[variantId]/route.ts",
          "src/app/api/variants/[variantId]/media/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Products API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Orders API",
        "description": "Create, list, get, update orders; internal supplier order placement.",
        "files": [
          "src/app/api/orders/route.ts",
          "src/app/api/orders/[id]/route.ts",
          "src/app/api/internal/create-supplier-order/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Orders API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Payments API",
        "description": "Checkout session and webhooks.",
        "files": [
          "src/app/api/payments/checkout/route.ts",
          "src/app/api/payments/webhook/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Payments API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Collections API",
        "description": "CRUD for product collections and product attachment.",
        "files": [
          "src/app/api/collections/route.ts",
          "src/app/api/collections/[id]/route.ts",
          "src/app/api/collections/[id]/products/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Collections API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Uploads Presign API",
        "description": "Generate S3 presigned URL for uploads.",
        "files": [
          "src/app/api/uploads/presign/route.ts",
          "src/lib/aws/s3.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Uploads API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Admin Auth API",
        "description": "Login, logout, and admin session info.",
        "files": [
          "src/app/api/admin/login/route.ts",
          "src/app/api/admin/logout/route.ts",
          "src/app/api/admin/me/route.ts",
          "src/app/api/admin/upgrade-password/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Admin Auth API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Sentinel API",
        "description": "Create/delete/check DB_OFF sentinel file to simulate DB unavailability.",
        "files": [
          "src/app/api/sentinel/status/route.ts",
          "src/app/api/sentinel/create/route.ts",
          "src/app/api/sentinel/delete/route.ts",
          "src/app/api/db_off_sentinel_status/route.ts",
          "src/app/api/db_off_sentinel_create/route.ts",
          "src/app/api/db_off_sentinel_delete/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Sentinel API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Supplier Webhooks",
        "description": "Webhook endpoints for supplier integrations with HMAC verification.",
        "files": [
          "src/app/api/webhooks/spocket/route.ts",
          "src/app/api/webhooks/autods/route.ts",
          "src/app/api/webhooks/modalyst/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Supplier Webhooks",
            "version": "1.0.0"
          },
          "paths": {}
        }
      },
      {
        "name": "Cron APIs",
        "description": "Trigger catalog sync job.",
        "files": [
          "src/app/api/cron/catalogSync/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.3",
          "info": {
            "title": "Cron API",
            "version": "1.0.0"
          },
          "paths": {}
        }
      }
    ]
  }
}
