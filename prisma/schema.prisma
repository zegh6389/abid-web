// Prisma schema for MVP commerce backend
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // hashed
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
  FULFILLMENT
  SUPPORT
}

model Product {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  subtitle    String?
  description String?
  brand       String?
  care        String?
  sizeGuide   String?
  seoTitle    String?
  seoDesc     String?
  canonical   String?
  tags        String[]   @default([])
  badges      String[]   @default([]) // New, Bestseller, etc
  collections CollectionOnProduct[]
  variants    Variant[]
  attributes  Attribute[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Variant {
  id          String   @id @default(cuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  sku         String?  @unique
  optionSize  String?
  optionColor String?
  material    String?
  fit         String?
  season      String?
  price       Decimal   @db.Decimal(10,2)
  compareAt   Decimal?  @db.Decimal(10,2)
  salePrice   Decimal?  @db.Decimal(10,2)
  saleStart   DateTime?
  saleEnd     DateTime?
  cost        Decimal?  @db.Decimal(10,2)
  msrp        Decimal?  @db.Decimal(10,2)
  inventory   Inventory?
  media       Media[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Media {
  id        String   @id @default(cuid())
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId String?
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  type      MediaType @default(IMAGE)
}

enum MediaType {
  IMAGE
  VIDEO
  SPIN360
}

model Inventory {
  id           String   @id @default(cuid())
  variant      Variant  @relation(fields: [variantId], references: [id])
  variantId    String   @unique
  stock        Int      @default(0)
  safetyStock  Int      @default(0)
  lowThreshold Int      @default(0)
  backorder    Boolean  @default(false)
  preorder     Boolean  @default(false)
  restockDate  DateTime?
}

model Collection {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  desc      String?
  products  CollectionOnProduct[]
}

model CollectionOnProduct {
  product   Product    @relation(fields: [productId], references: [id])
  productId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  position  Int       @default(0)
  @@id([productId, collectionId])
}

model Attribute {
  id    String  @id @default(cuid())
  name  String
  value String
  // In MVP keep loose; later normalize per product
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Review {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  title     String?
  body      String?
  createdAt DateTime @default(now())
}

// Orders & Payments

model Order {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      OrderStatus   @default(PENDING)
  total       Decimal       @db.Decimal(10,2)
  currency    String        @default("PKR")
  email       String?
  name        String?
  addressLine1 String?
  addressLine2 String?
  city        String?
  state       String?
  postalCode  String?
  items       OrderItem[]
  payments    Payment[]
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  variantId String?
  productId String?
  title     String
  quantity  Int
  price     Decimal @db.Decimal(10,2)
  image     String?
}

model Payment {
  id        String        @id @default(cuid())
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String
  provider  String
  status    PaymentStatus @default(REQUIRES_CONFIRMATION)
  amount    Decimal       @db.Decimal(10,2)
  currency  String        @default("PKR")
  sessionId String?
  externalId String?
  createdAt DateTime      @default(now())
}

enum PaymentStatus {
  REQUIRES_CONFIRMATION
  PAID
  FAILED
  CANCELED
  REFUNDED
}